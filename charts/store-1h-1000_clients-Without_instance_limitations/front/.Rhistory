library(ggplot2)
data <- read.csv("/Users/tiago/Desktop/nova experiencia 20DEZ/store-1h-1000-Infinite/front/CPU_utilization_(%)-2023_12_20_10_35_00-2023_12_20_11_30_00-UTC.csv")
theme_set(
theme_classic() +
theme(legend.position = "top")
)
# Convert the date-time column to a proper format
#data$DateAndTime <- as.POSIXct(data$Label, format = "%m/%d/%y %H:%M")
# Create a vector of DateAndTime starting from 300, increasing by 300
data$DateAndTime <- seq(from = 300, by = 300, length.out = nrow(data))
# Plot the data using ggplot2
p <- ggplot(data, aes(x = DateAndTime)) +
geom_line(aes(y = Instance.A, color = "1st Instance"), size = 1, linetype = "solid") +
geom_point(aes(y = Instance.A, color = "1st Instance"), size = 2) +
geom_line(aes(y = Instance.B, color = "2nd Instance"), size = 1, linetype = "dashed") +
geom_point(aes(y = Instance.B, color = "2nd Instance"), size = 2) +
geom_line(aes(y = Instance.C, color = "3rd Instance"), size = 1, linetype = "dotted") +
geom_point(aes(y = Instance.C, color = "3rd Instance"), size = 2) +
geom_line(aes(y = Instance.D, color = "4th Instance"), size = 1, linetype = "dotdash") +
geom_point(aes(y = Instance.D, color = "4th Instance"), size = 2) +
geom_line(aes(y = Instance.E, color = "5th Instance"), size = 1, linetype = "longdash") +
geom_point(aes(y = Instance.E, color = "5th Instance"), size = 2) +
geom_line(aes(y = Instance.F, color = "6th Instance"), size = 1, linetype = "twodash") +
geom_point(aes(y = Instance.F, color = "6th Instance"), size = 2) +
geom_line(aes(y = Instance.G, color = "7th Instance"), size = 1, linetype = "22") +
geom_point(aes(y = Instance.G, color = "7th Instance"), size = 2) +
geom_line(aes(y = Instance.H, color = "8th Instance"), size = 1, linetype = "44") +
geom_point(aes(y = Instance.H, color = "8th Instance"), size = 2) +
labs(title = "",
x = "Elapsed Time (seconds)",
y = "CPU usage (percentage)",
color = "Legend") +
theme_minimal() +
scale_color_manual(values = c(
"1st Instance" = "#66c2a5",
"2nd Instance" = "#fc8d62",
"3rd Instance" = "#8da0cb",
"4th Instance" = "#e78ac3",
"5th Instance" = "#a6d854",
"6th Instance" = "#ffd92f",
"7th Instance" = "#e5c494",
"8th Instance" = "#b3b3b3"
)) +
theme_classic()
# Save the plot as a PDF with a resolution of 1024x768
#ggsave("/Users/tiago/cpu.pdf", plot = p, width = 7, height = 4.5, units = "in", dpi = 300)
print(p)
library(ggplot2)
data <- read.csv("/Users/tiago/Desktop/nova experiencia 20DEZ/store-1h-1000-Infinite/front/Network_out_(bytes)-2023_12_20_10_35_00-2023_12_20_11_30_00-UTC.csv")
theme_set(
theme_classic() +
theme(legend.position = "top")
)
# Convert the date-time column to a proper format
#data$DateAndTime <- as.POSIXct(data$Label, format = "%m/%d/%y %H:%M")
# Create a vector of DateAndTime starting from 300, increasing by 300
data$DateAndTime <- seq(from = 300, by = 300, length.out = nrow(data))
# Plot the data using ggplot2
p <- ggplot(data, aes(x = DateAndTime)) +
geom_line(aes(y = Instance.A, color = "1st Instance"), size = 1, linetype = "solid") +
geom_point(aes(y = Instance.A, color = "1st Instance"), size = 2) +
geom_line(aes(y = Instance.B, color = "2nd Instance"), size = 1, linetype = "dashed") +
geom_point(aes(y = Instance.B, color = "2nd Instance"), size = 2) +
geom_line(aes(y = Instance.C, color = "3rd Instance"), size = 1, linetype = "dotted") +
geom_point(aes(y = Instance.C, color = "3rd Instance"), size = 2) +
geom_line(aes(y = Instance.D, color = "4th Instance"), size = 1, linetype = "dotdash") +
geom_point(aes(y = Instance.D, color = "4th Instance"), size = 2) +
geom_line(aes(y = Instance.E, color = "5th Instance"), size = 1, linetype = "longdash") +
geom_point(aes(y = Instance.E, color = "5th Instance"), size = 2) +
geom_line(aes(y = Instance.F, color = "6th Instance"), size = 1, linetype = "twodash") +
geom_point(aes(y = Instance.F, color = "6th Instance"), size = 2) +
geom_line(aes(y = Instance.G, color = "7th Instance"), size = 1, linetype = "22") +
geom_point(aes(y = Instance.G, color = "7th Instance"), size = 2) +
geom_line(aes(y = Instance.H, color = "8th Instance"), size = 1, linetype = "44") +
geom_point(aes(y = Instance.H, color = "8th Instance"), size = 2) +
labs(title = "",
x = "Elapsed Time (seconds)",
y = "CPU usage (percentage)",
color = "Legend") +
theme_minimal() +
scale_color_manual(values = c(
"1st Instance" = "#66c2a5",
"2nd Instance" = "#fc8d62",
"3rd Instance" = "#8da0cb",
"4th Instance" = "#e78ac3",
"5th Instance" = "#a6d854",
"6th Instance" = "#ffd92f",
"7th Instance" = "#e5c494",
"8th Instance" = "#b3b3b3"
)) +
theme_classic()
# Save the plot as a PDF with a resolution of 1024x768
#ggsave("/Users/tiago/cpu.pdf", plot = p, width = 6, height = 3.5, units = "in", dpi = 300)
print(p)
library(ggplot2)
data <- read.csv("/Users/tiago/Desktop/nova experiencia 20DEZ/store-1h-1000-Infinite/front/Network_out_(bytes)-2023_12_20_10_35_00-2023_12_20_11_30_00-UTC.csv")
theme_set(
theme_classic() +
theme(legend.position = "top")
)
# Create a vector of DateAndTime starting from 300, increasing by 300
data$DateAndTime <- seq(from = 300, by = 300, length.out = nrow(data))
# Converter os valores de bytes para megabytes
data$Instance.A <- data$Instance.A / (1024 * 1024)
data$Instance.B <- data$Instance.B / (1024 * 1024)
data$Instance.C <- data$Instance.C / (1024 * 1024)
data$Instance.D <- data$Instance.D / (1024 * 1024)
data$Instance.E <- data$Instance.E / (1024 * 1024)
data$Instance.F <- data$Instance.F / (1024 * 1024)
# Criar um vetor de formas associadas a cada instância
shapes <- c("1st Instance" = 16, "2nd Instance" = 17, "3rd Instance" = 18, "4th Instance" = 19, "5th Instance" = 20, "6th Instance" = 21)
# Plotar os dados usando ggplot2
p <- ggplot(data, aes(x = DateAndTime)) +
geom_line(aes(y = Instance.A, color = "1st Instance", shape = "1st Instance"), size = 1, linetype = "solid") +
geom_point(aes(y = Instance.A, color = "1st Instance", shape = "1st Instance"), size = 2) +
geom_line(aes(y = Instance.B, color = "2nd Instance", shape = "2nd Instance"), size = 1, linetype = "dashed") +
geom_point(aes(y = Instance.B, color = "2nd Instance", shape = "2nd Instance"), size = 2) +
geom_line(aes(y = Instance.C, color = "3rd Instance", shape = "3rd Instance"), size = 1, linetype = "dotted") +
geom_point(aes(y = Instance.C, color = "3rd Instance", shape = "3rd Instance"), size = 2) +
geom_line(aes(y = Instance.D, color = "4th Instance", shape = "4th Instance"), size = 1, linetype = "dotdash") +
geom_point(aes(y = Instance.D, color = "4th Instance", shape = "4th Instance"), size = 2) +
geom_line(aes(y = Instance.E, color = "5th Instance", shape = "5th Instance"), size = 1, linetype = "solid") +
geom_point(aes(y = Instance.E, color = "5th Instance", shape = "5th Instance"), size = 2) +
geom_line(aes(y = Instance.F, color = "6th Instance", shape = "6th Instance"), size = 1, linetype = "dashed") +
geom_point(aes(y = Instance.F, color = "6th Instance", shape = "6th Instance"), size = 2) +
labs(title = "",
x = "Elapsed Time (seconds)",
y = "Megabytes (per second)",
color = "Legend") +
theme_minimal() +
scale_color_manual(values = c("1st Instance" = "#56B4E9", "2nd Instance" = "#66C2A5", "3rd Instance" = "#999999", "4th Instance" = "#E69F00", "5th Instance" = "#D55E00", "6th Instance" = "#0072B2")) +
theme_classic() +
theme(legend.position = "top") +
theme(legend.box = "horizontal", legend.box.just = "center", legend.margin = margin(t = 0, unit = "pt")) +
scale_y_continuous(limits = c(0, 20)) +
guides(shape = guide_legend(override.aes = list(color = c("#56B4E9", "#66C2A5", "#999999", "#E69F00", "#D55E00", "#0072B2")),
title = "Legend"))
# Salvar o gráfico como um PDF com uma resolução de 1024x768
ggsave("/Users/tiago/Desktop/nova experiencia 20DEZ/store-1h-1000-Infinite/front/nw-out.pdf", plot = p, width = 6, height = 3.5, units = "in", dpi = 300)
print(p)
library(ggplot2)
data <- read.csv("/Users/tiago/Desktop/nova experiencia 20DEZ/store-1h-1000-Infinite/front/Network_out_(bytes)-2023_12_20_10_35_00-2023_12_20_11_30_00-UTC.csv")
theme_set(
theme_classic() +
theme(legend.position = "top")
)
# Create a vector of DateAndTime starting from 300, increasing by 300
data$DateAndTime <- seq(from = 300, by = 300, length.out = nrow(data))
# Converter os valores de bytes para megabytes
data$Instance.A <- data$Instance.A / (1024 * 1024)
data$Instance.B <- data$Instance.B / (1024 * 1024)
data$Instance.C <- data$Instance.C / (1024 * 1024)
data$Instance.D <- data$Instance.D / (1024 * 1024)
data$Instance.E <- data$Instance.E / (1024 * 1024)
data$Instance.F <- data$Instance.F / (1024 * 1024)
# Criar um vetor de formas associadas a cada instância
shapes <- c("1st Instance" = 16, "2nd Instance" = 17, "3rd Instance" = 18, "4th Instance" = 19, "5th Instance" = 20, "6th Instance" = 21)
# Plotar os dados usando ggplot2
p <- ggplot(data, aes(x = DateAndTime)) +
geom_line(aes(y = Instance.A, color = "1st Instance", shape = "1st Instance"), size = 1, linetype = "solid") +
geom_point(aes(y = Instance.A, color = "1st Instance", shape = "1st Instance"), size = 2) +
geom_line(aes(y = Instance.B, color = "2nd Instance", shape = "2nd Instance"), size = 1, linetype = "dashed") +
geom_point(aes(y = Instance.B, color = "2nd Instance", shape = "2nd Instance"), size = 2) +
geom_line(aes(y = Instance.C, color = "3rd Instance", shape = "3rd Instance"), size = 1, linetype = "dotted") +
geom_point(aes(y = Instance.C, color = "3rd Instance", shape = "3rd Instance"), size = 2) +
geom_line(aes(y = Instance.D, color = "4th Instance", shape = "4th Instance"), size = 1, linetype = "dotdash") +
geom_point(aes(y = Instance.D, color = "4th Instance", shape = "4th Instance"), size = 2) +
geom_line(aes(y = Instance.E, color = "5th Instance", shape = "5th Instance"), size = 1, linetype = "solid") +
geom_point(aes(y = Instance.E, color = "5th Instance", shape = "5th Instance"), size = 2) +
geom_line(aes(y = Instance.F, color = "6th Instance", shape = "6th Instance"), size = 1, linetype = "dashed") +
geom_point(aes(y = Instance.F, color = "6th Instance", shape = "6th Instance"), size = 2) +
labs(title = "",
x = "Elapsed Time (seconds)",
y = "Megabytes (per second)",
color = "Legend") +
theme_minimal() +
scale_color_manual(values = c("1st Instance" = "#56B4E9", "2nd Instance" = "#66C2A5", "3rd Instance" = "#999999", "4th Instance" = "#E69F00", "5th Instance" = "#D55E00", "6th Instance" = "#0072B2")) +
theme_classic() +
theme(legend.position = "top") +
theme(legend.box = "horizontal", legend.box.just = "center", legend.margin = margin(t = 0, unit = "pt")) +
scale_y_continuous(limits = c(0, 50)) +
guides(shape = guide_legend(override.aes = list(color = c("#56B4E9", "#66C2A5", "#999999", "#E69F00", "#D55E00", "#0072B2")),
title = "Legend"))
# Salvar o gráfico como um PDF com uma resolução de 1024x768
ggsave("/Users/tiago/Desktop/nova experiencia 20DEZ/store-1h-1000-Infinite/front/nw-out.pdf", plot = p, width = 6, height = 3.5, units = "in", dpi = 300)
print(p)
library(ggplot2)
data <- read.csv("/Users/tiago/Desktop/nova experiencia 20DEZ/store-1h-1000-Infinite/front/Network_out_(bytes)-2023_12_20_10_35_00-2023_12_20_11_30_00-UTC.csv")
theme_set(
theme_classic() +
theme(legend.position = "top")
)
# Create a vector of DateAndTime starting from 300, increasing by 300
data$DateAndTime <- seq(from = 300, by = 300, length.out = nrow(data))
# Converter os valores de bytes para megabytes
data$Instance.A <- data$Instance.A / (1024 * 1024)
data$Instance.B <- data$Instance.B / (1024 * 1024)
data$Instance.C <- data$Instance.C / (1024 * 1024)
data$Instance.D <- data$Instance.D / (1024 * 1024)
data$Instance.E <- data$Instance.E / (1024 * 1024)
data$Instance.F <- data$Instance.F / (1024 * 1024)
# Criar um vetor de formas associadas a cada instância
shapes <- c("1st Instance" = 16, "2nd Instance" = 17, "3rd Instance" = 18, "4th Instance" = 19, "5th Instance" = 20, "6th Instance" = 21)
# Plotar os dados usando ggplot2
p <- ggplot(data, aes(x = DateAndTime)) +
geom_line(aes(y = Instance.A, color = "1st Instance", shape = "1st Instance"), size = 1, linetype = "solid") +
geom_point(aes(y = Instance.A, color = "1st Instance", shape = "1st Instance"), size = 2) +
geom_line(aes(y = Instance.B, color = "2nd Instance", shape = "2nd Instance"), size = 1, linetype = "dashed") +
geom_point(aes(y = Instance.B, color = "2nd Instance", shape = "2nd Instance"), size = 2) +
geom_line(aes(y = Instance.C, color = "3rd Instance", shape = "3rd Instance"), size = 1, linetype = "dotted") +
geom_point(aes(y = Instance.C, color = "3rd Instance", shape = "3rd Instance"), size = 2) +
geom_line(aes(y = Instance.D, color = "4th Instance", shape = "4th Instance"), size = 1, linetype = "dotdash") +
geom_point(aes(y = Instance.D, color = "4th Instance", shape = "4th Instance"), size = 2) +
geom_line(aes(y = Instance.E, color = "5th Instance", shape = "5th Instance"), size = 1, linetype = "solid") +
geom_point(aes(y = Instance.E, color = "5th Instance", shape = "5th Instance"), size = 2) +
geom_line(aes(y = Instance.F, color = "6th Instance", shape = "6th Instance"), size = 1, linetype = "dashed") +
geom_point(aes(y = Instance.F, color = "6th Instance", shape = "6th Instance"), size = 2) +
labs(title = "",
x = "Elapsed Time (seconds)",
y = "Megabytes (per second)",
color = "Legend") +
theme_minimal() +
scale_color_manual(values = c("1st Instance" = "#56B4E9", "2nd Instance" = "#66C2A5", "3rd Instance" = "#999999", "4th Instance" = "#E69F00", "5th Instance" = "#D55E00", "6th Instance" = "#0072B2")) +
theme_classic() +
theme(legend.position = "top") +
theme(legend.box = "horizontal", legend.box.just = "center", legend.margin = margin(t = 0, unit = "pt")) +
scale_y_continuous(limits = c(0, 100)) +
guides(shape = guide_legend(override.aes = list(color = c("#56B4E9", "#66C2A5", "#999999", "#E69F00", "#D55E00", "#0072B2")),
title = "Legend"))
# Salvar o gráfico como um PDF com uma resolução de 1024x768
ggsave("/Users/tiago/Desktop/nova experiencia 20DEZ/store-1h-1000-Infinite/front/nw-out.pdf", plot = p, width = 6, height = 3.5, units = "in", dpi = 300)
print(p)
library(ggplot2)
data <- read.csv("/Users/tiago/Desktop/nova experiencia 20DEZ/store-1h-1000-Infinite/front/Network_out_(bytes)-2023_12_20_10_35_00-2023_12_20_11_30_00-UTC.csv")
theme_set(
theme_classic() +
theme(legend.position = "top")
)
# Create a vector of DateAndTime starting from 300, increasing by 300
data$DateAndTime <- seq(from = 300, by = 300, length.out = nrow(data))
# Converter os valores de bytes para megabytes
data$Instance.A <- data$Instance.A / (1024 * 1024)
data$Instance.B <- data$Instance.B / (1024 * 1024)
data$Instance.C <- data$Instance.C / (1024 * 1024)
data$Instance.D <- data$Instance.D / (1024 * 1024)
data$Instance.E <- data$Instance.E / (1024 * 1024)
data$Instance.F <- data$Instance.F / (1024 * 1024)
# Criar um vetor de formas associadas a cada instância
shapes <- c("1st Instance" = 16, "2nd Instance" = 17, "3rd Instance" = 18, "4th Instance" = 19, "5th Instance" = 20, "6th Instance" = 21)
# Plotar os dados usando ggplot2
p <- ggplot(data, aes(x = DateAndTime)) +
geom_line(aes(y = Instance.A, color = "1st Instance", shape = "1st Instance"), size = 1, linetype = "solid") +
geom_point(aes(y = Instance.A, color = "1st Instance", shape = "1st Instance"), size = 2) +
geom_line(aes(y = Instance.B, color = "2nd Instance", shape = "2nd Instance"), size = 1, linetype = "dashed") +
geom_point(aes(y = Instance.B, color = "2nd Instance", shape = "2nd Instance"), size = 2) +
geom_line(aes(y = Instance.C, color = "3rd Instance", shape = "3rd Instance"), size = 1, linetype = "dotted") +
geom_point(aes(y = Instance.C, color = "3rd Instance", shape = "3rd Instance"), size = 2) +
geom_line(aes(y = Instance.D, color = "4th Instance", shape = "4th Instance"), size = 1, linetype = "dotdash") +
geom_point(aes(y = Instance.D, color = "4th Instance", shape = "4th Instance"), size = 2) +
geom_line(aes(y = Instance.E, color = "5th Instance", shape = "5th Instance"), size = 1, linetype = "solid") +
geom_point(aes(y = Instance.E, color = "5th Instance", shape = "5th Instance"), size = 2) +
geom_line(aes(y = Instance.F, color = "6th Instance", shape = "6th Instance"), size = 1, linetype = "dashed") +
geom_point(aes(y = Instance.F, color = "6th Instance", shape = "6th Instance"), size = 2) +
labs(title = "",
x = "Elapsed Time (seconds)",
y = "Megabytes (per second)",
color = "Legend") +
theme_minimal() +
scale_color_manual(values = c("1st Instance" = "#56B4E9", "2nd Instance" = "#66C2A5", "3rd Instance" = "#999999", "4th Instance" = "#E69F00", "5th Instance" = "#D55E00", "6th Instance" = "#0072B2")) +
theme_classic() +
theme(legend.position = "top") +
theme(legend.box = "horizontal", legend.box.just = "center", legend.margin = margin(t = 0, unit = "pt")) +
scale_y_continuous(limits = c(0, 70)) +
guides(shape = guide_legend(override.aes = list(color = c("#56B4E9", "#66C2A5", "#999999", "#E69F00", "#D55E00", "#0072B2")),
title = "Legend"))
# Salvar o gráfico como um PDF com uma resolução de 1024x768
ggsave("/Users/tiago/Desktop/nova experiencia 20DEZ/store-1h-1000-Infinite/front/nw-out.pdf", plot = p, width = 6, height = 3.5, units = "in", dpi = 300)
print(p)
library(ggplot2)
data <- read.csv("/Users/tiago/Desktop/nova experiencia 20DEZ/store-1h-1000-Infinite/front/Network_out_(bytes)-2023_12_20_10_35_00-2023_12_20_11_30_00-UTC.csv")
theme_set(
theme_classic() +
theme(legend.position = "top")
)
# Create a vector of DateAndTime starting from 300, increasing by 300
data$DateAndTime <- seq(from = 300, by = 300, length.out = nrow(data))
# Converter os valores de bytes para megabytes
data$Instance.A <- data$Instance.A / (1024 * 1024)
data$Instance.B <- data$Instance.B / (1024 * 1024)
data$Instance.C <- data$Instance.C / (1024 * 1024)
data$Instance.D <- data$Instance.D / (1024 * 1024)
data$Instance.E <- data$Instance.E / (1024 * 1024)
data$Instance.F <- data$Instance.F / (1024 * 1024)
# Criar um vetor de formas associadas a cada instância
shapes <- c("1st Instance" = 16, "2nd Instance" = 17, "3rd Instance" = 18, "4th Instance" = 19, "5th Instance" = 20, "6th Instance" = 21)
# Plotar os dados usando ggplot2
p <- ggplot(data, aes(x = DateAndTime)) +
geom_line(aes(y = Instance.A, color = "1st Instance", shape = "1st Instance"), size = 1, linetype = "solid") +
geom_point(aes(y = Instance.A, color = "1st Instance", shape = "1st Instance"), size = 2) +
geom_line(aes(y = Instance.B, color = "2nd Instance", shape = "2nd Instance"), size = 1, linetype = "dashed") +
geom_point(aes(y = Instance.B, color = "2nd Instance", shape = "2nd Instance"), size = 2) +
geom_line(aes(y = Instance.C, color = "3rd Instance", shape = "3rd Instance"), size = 1, linetype = "dotted") +
geom_point(aes(y = Instance.C, color = "3rd Instance", shape = "3rd Instance"), size = 2) +
geom_line(aes(y = Instance.D, color = "4th Instance", shape = "4th Instance"), size = 1, linetype = "dotdash") +
geom_point(aes(y = Instance.D, color = "4th Instance", shape = "4th Instance"), size = 2) +
geom_line(aes(y = Instance.E, color = "5th Instance", shape = "5th Instance"), size = 1, linetype = "solid") +
geom_point(aes(y = Instance.E, color = "5th Instance", shape = "5th Instance"), size = 2) +
geom_line(aes(y = Instance.F, color = "6th Instance", shape = "6th Instance"), size = 1, linetype = "dashed") +
geom_point(aes(y = Instance.F, color = "6th Instance", shape = "6th Instance"), size = 2) +
labs(title = "",
x = "Elapsed Time (seconds)",
y = "Megabytes (per second)",
color = "Legend") +
theme_minimal() +
scale_color_manual(values = c("1st Instance" = "#56B4E9", "2nd Instance" = "#66C2A5", "3rd Instance" = "#999999", "4th Instance" = "#E69F00", "5th Instance" = "#D55E00", "6th Instance" = "#0072B2")) +
theme_classic() +
theme(legend.position = "top") +
theme(legend.box = "horizontal", legend.box.just = "center", legend.margin = margin(t = 0, unit = "pt")) +
scale_y_continuous(limits = c(0, 30)) +
guides(shape = guide_legend(override.aes = list(color = c("#56B4E9", "#66C2A5", "#999999", "#E69F00", "#D55E00", "#0072B2")),
title = "Legend"))
# Salvar o gráfico como um PDF com uma resolução de 1024x768
ggsave("/Users/tiago/Desktop/nova experiencia 20DEZ/store-1h-1000-Infinite/front/nw-out.pdf", plot = p, width = 6, height = 3.5, units = "in", dpi = 300)
print(p)
library(ggplot2)
data <- read.csv("/Users/tiago/Desktop/nova experiencia 20DEZ/store-1h-1000-Infinite/front/Network_out_(bytes)-2023_12_20_10_35_00-2023_12_20_11_30_00-UTC.csv")
theme_set(
theme_classic() +
theme(legend.position = "top")
)
# Create a vector of DateAndTime starting from 300, increasing by 300
data$DateAndTime <- seq(from = 300, by = 300, length.out = nrow(data))
# Converter os valores de bytes para megabytes
data$Instance.A <- data$Instance.A / (1024 * 1024)
data$Instance.B <- data$Instance.B / (1024 * 1024)
data$Instance.C <- data$Instance.C / (1024 * 1024)
data$Instance.D <- data$Instance.D / (1024 * 1024)
data$Instance.E <- data$Instance.E / (1024 * 1024)
data$Instance.F <- data$Instance.F / (1024 * 1024)
# Criar um vetor de formas associadas a cada instância
shapes <- c("1st Instance" = 16, "2nd Instance" = 17, "3rd Instance" = 18, "4th Instance" = 19, "5th Instance" = 20, "6th Instance" = 21)
# Plotar os dados usando ggplot2
p <- ggplot(data, aes(x = DateAndTime)) +
geom_line(aes(y = Instance.A, color = "1st Instance", shape = "1st Instance"), size = 1, linetype = "solid") +
geom_point(aes(y = Instance.A, color = "1st Instance", shape = "1st Instance"), size = 2) +
geom_line(aes(y = Instance.B, color = "2nd Instance", shape = "2nd Instance"), size = 1, linetype = "dashed") +
geom_point(aes(y = Instance.B, color = "2nd Instance", shape = "2nd Instance"), size = 2) +
geom_line(aes(y = Instance.C, color = "3rd Instance", shape = "3rd Instance"), size = 1, linetype = "dotted") +
geom_point(aes(y = Instance.C, color = "3rd Instance", shape = "3rd Instance"), size = 2) +
geom_line(aes(y = Instance.D, color = "4th Instance", shape = "4th Instance"), size = 1, linetype = "dotdash") +
geom_point(aes(y = Instance.D, color = "4th Instance", shape = "4th Instance"), size = 2) +
geom_line(aes(y = Instance.E, color = "5th Instance", shape = "5th Instance"), size = 1, linetype = "solid") +
geom_point(aes(y = Instance.E, color = "5th Instance", shape = "5th Instance"), size = 2) +
geom_line(aes(y = Instance.F, color = "6th Instance", shape = "6th Instance"), size = 1, linetype = "dashed") +
geom_point(aes(y = Instance.F, color = "6th Instance", shape = "6th Instance"), size = 2) +
labs(title = "",
x = "Elapsed Time (seconds)",
y = "Megabytes (per second)",
color = "Legend") +
theme_minimal() +
scale_color_manual(values = c("1st Instance" = "#56B4E9", "2nd Instance" = "#66C2A5", "3rd Instance" = "#999999", "4th Instance" = "#E69F00", "5th Instance" = "#D55E00", "6th Instance" = "#0072B2")) +
theme_classic() +
theme(legend.position = "top") +
theme(legend.box = "horizontal", legend.box.just = "center", legend.margin = margin(t = 0, unit = "pt")) +
scale_y_continuous(limits = c(0, 10)) +
guides(shape = guide_legend(override.aes = list(color = c("#56B4E9", "#66C2A5", "#999999", "#E69F00", "#D55E00", "#0072B2")),
title = "Legend"))
# Salvar o gráfico como um PDF com uma resolução de 1024x768
ggsave("/Users/tiago/Desktop/nova experiencia 20DEZ/store-1h-1000-Infinite/front/nw-out.pdf", plot = p, width = 6, height = 3.5, units = "in", dpi = 300)
print(p)
library(ggplot2)
data <- read.csv("/Users/tiago/Desktop/nova experiencia 20DEZ/store-1h-1000-Infinite/front/Network_out_(bytes)-2023_12_20_10_35_00-2023_12_20_11_30_00-UTC.csv")
theme_set(
theme_classic() +
theme(legend.position = "top")
)
# Create a vector of DateAndTime starting from 300, increasing by 300
data$DateAndTime <- seq(from = 300, by = 300, length.out = nrow(data))
# Converter os valores de bytes para megabytes
data$Instance.A <- data$Instance.A / (1024 * 1024)
data$Instance.B <- data$Instance.B / (1024 * 1024)
data$Instance.C <- data$Instance.C / (1024 * 1024)
data$Instance.D <- data$Instance.D / (1024 * 1024)
data$Instance.E <- data$Instance.E / (1024 * 1024)
data$Instance.F <- data$Instance.F / (1024 * 1024)
# Criar um vetor de formas associadas a cada instância
shapes <- c("1st Instance" = 16, "2nd Instance" = 17, "3rd Instance" = 18, "4th Instance" = 19, "5th Instance" = 20, "6th Instance" = 21)
# Plotar os dados usando ggplot2
p <- ggplot(data, aes(x = DateAndTime)) +
geom_line(aes(y = Instance.A, color = "1st Instance", shape = "1st Instance"), size = 1, linetype = "solid") +
geom_point(aes(y = Instance.A, color = "1st Instance", shape = "1st Instance"), size = 2) +
geom_line(aes(y = Instance.B, color = "2nd Instance", shape = "2nd Instance"), size = 1, linetype = "dashed") +
geom_point(aes(y = Instance.B, color = "2nd Instance", shape = "2nd Instance"), size = 2) +
geom_line(aes(y = Instance.C, color = "3rd Instance", shape = "3rd Instance"), size = 1, linetype = "dotted") +
geom_point(aes(y = Instance.C, color = "3rd Instance", shape = "3rd Instance"), size = 2) +
geom_line(aes(y = Instance.D, color = "4th Instance", shape = "4th Instance"), size = 1, linetype = "dotdash") +
geom_point(aes(y = Instance.D, color = "4th Instance", shape = "4th Instance"), size = 2) +
geom_line(aes(y = Instance.E, color = "5th Instance", shape = "5th Instance"), size = 1, linetype = "solid") +
geom_point(aes(y = Instance.E, color = "5th Instance", shape = "5th Instance"), size = 2) +
geom_line(aes(y = Instance.F, color = "6th Instance", shape = "6th Instance"), size = 1, linetype = "dashed") +
geom_point(aes(y = Instance.F, color = "6th Instance", shape = "6th Instance"), size = 2) +
labs(title = "",
x = "Elapsed Time (seconds)",
y = "Megabytes (per second)",
color = "Legend") +
theme_minimal() +
scale_color_manual(values = c("1st Instance" = "#56B4E9", "2nd Instance" = "#66C2A5", "3rd Instance" = "#999999", "4th Instance" = "#E69F00", "5th Instance" = "#D55E00", "6th Instance" = "#0072B2")) +
theme_classic() +
theme(legend.position = "top") +
theme(legend.box = "horizontal", legend.box.just = "center", legend.margin = margin(t = 0, unit = "pt")) +
scale_y_continuous(limits = c(0, 70)) +
guides(shape = guide_legend(override.aes = list(color = c("#56B4E9", "#66C2A5", "#999999", "#E69F00", "#D55E00", "#0072B2")),
title = "Legend"))
# Salvar o gráfico como um PDF com uma resolução de 1024x768
ggsave("/Users/tiago/Desktop/nova experiencia 20DEZ/store-1h-1000-Infinite/front/nw-out.pdf", plot = p, width = 6, height = 3.5, units = "in", dpi = 300)
print(p)
